[build-system]
requires = ["setuptools>74.1", "wheel"]
build-backend = "setuptools.build_meta"


[project]
name = "topocore"
authors = [
    { name = "Caelan Osman", email = "caelan.osman@jhuapl.edu" },
    { name = "Seth Graham", email = "Seth.Graham@jhuapl.edu" },
    { name = "Nicole Gun", email = "Nicole.Gun@jhuapl.edu" }
]
maintainers = [
    { name = "Caelan Osman", email = "caelan.osman@jhuapl.edu" },
    { name = "Seth Graham", email = "Seth.Graham@jhuapl.edu" },
    { name = "Nicole Gun", email = "Nicole.Gun@jhuapl.edu" },
]
description = "Topological data analysis of fibromylaga"
requires-python = "~=3.11"
classifiers = [
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
]

dependencies = [
    "gudhi==3.11.0",
    "pandas==2.2.3",
    "matplotlib==3.10.1",
    "numpy==2.2.4"
]
dynamic = ["version"]
[project.urls]
Repository = "https://github.com/acjo/fmtda"
homepage = "https://github.com/acjo/fmtda"
[project.optional-dependencies]
docs = ["sphinx==7.4.7", "sphinx-rtd-theme==3.0.2", "furo==2024.8.6"]
tests = ["pytest"]
[tool.setuptools]
packages = ["fmtda"]
include-package-data = true
[tool.setuptools.dynamic]
version = { attr = "fmtda.__version__" }


[tool.ruff]
line-length = 80
indent-width = 4

# Exclude files/directories
exclude = [".git", "**/__pycache__"]
include = ["fmtda/**/*.py"]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["D"]
# select = ["E4", "E7", "E9", "F"]
ignore = ["D203", "D212", "D213", "D107"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pydocstyle]
convention = "numpy"
